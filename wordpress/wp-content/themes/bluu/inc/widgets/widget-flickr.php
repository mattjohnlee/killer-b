<?php

class Bluu_Flickr_Photos_Widget extends WP_Widget {

	/*--------------------------------------------------*/
	/* Constructor
	/*--------------------------------------------------*/

	/**
	 * Sets up the widgets name etc
	 */
	function Bluu_Flickr_Photos_Widget() {
		
		$widget_ops = array(
			'classname' 	=> 'bluu_flickr_photos',
			'description' 	=> __( 'Display your recent Flickr photos.', 'bluu' ),
		);

		$control_ops = array(
			'id_base' => 'bluu_flickr_photos-widget'
		);

		$this->WP_Widget( 'bluu_flickr_photos-widget', __( 'Bluu: Flickr Photos', 'bluu' ), $widget_ops, $control_ops );

		// Refreshing the widget's cached output with each new post
		add_action( 'save_post', array( $this, 'flush_widget_cache' ) );
		add_action( 'deleted_post', array( $this, 'flush_widget_cache' ) );
		add_action( 'switch_theme', array( $this, 'flush_widget_cache' ) );

	} // end widget set-up


	/*--------------------------------------------------*/
	/* Widget API Functions
	/*--------------------------------------------------*/

	/**
	 * Outputs the content of the widget
	 *
	 * @param array $args
	 * @param array $instance
	 */
	function widget( $args, $instance ) {

		// Check if there is a cached output
		$cache = wp_cache_get( 'bluu_flickr_photos-widget', 'widget' );

		if ( !is_array( $cache ) )
			$cache = array();

		if ( isset( $cache[ $args['widget_id'] ] ) ) {
			echo $cache[ $args['widget_id'] ];
			return;
		}

		ob_start();
		extract( $args );
		
		$title = apply_filters( 'widget_title', $instance['title'] );
		$bluu_flickruser = $instance['bluu_flickruser'];
		$bluu_feedcount = $instance['bluu_feedcount'];
		$bluu_api = $instance['bluu_api'];
		if( empty( $api ) ) {
			$api = 'c9d2c2fda03a2ff487cb4769dc0781ea';
		}

		echo $args['before_widget'];

		if ( ! empty( $title ) )
			echo $args['before_title'] . $title . $args['after_title'];

		// start main widget content..

		if( $bluu_flickruser && $bluu_feedcount && $bluu_api ) {
		?>

			<script type="text/javascript">
				function jsonFlickrApi(rsp) {
					if (rsp.stat != "ok"){
						// If this executes, something broke!
						return;
					}

					//variable "s" is going to contain
					//all the markup that is generated by the loop below
					var s = "";

					//this loop runs through every item and creates HTML
					for (var i=0; i < rsp.photos.photo.length; i++) {
						photo = rsp.photos.photo[ i ];

						//notice that "t.jpg" is where you change the
						//size of the image
						t_url = "http://farm" + photo.farm +
						".static.flickr.com/" + photo.server + "/" +
						photo.id + "_" + photo.secret + "_" + "s.jpg";

						p_url = "http://www.flickr.com/photos/" +
						photo.owner + "/" + photo.id;

						s +=  '<div class="flickr_badge_image"><a href="' + p_url + '">' + '<img alt="'+
						photo.title + '"src="' + t_url + '"/>' + '</a></div>';
					}

					document.write(s);
				}
			</script>

			<div class="flickr-container">
				<script type="text/javascript" src="http://api.flickr.com/services/rest/?format=json&amp;method=flickr.photos.search&amp;user_id=<?php echo $bluu_flickruser; ?>&amp;api_key=<?php echo $bluu_api; ?>&amp;media=photos&amp;per_page=<?php echo $bluu_feedcount; ?>&amp;privacy_filter=1"></script>
			</div>
		<?php
		}

		// end main widget content

		echo $args['after_widget'];

		$cache[ $args['widget_id'] ] = ob_get_flush();
		wp_cache_add( 'bluu_flickr_photos-widget', $cache, 'widget' );

	} // end widget function


	/*--------------------------------------------------*/
	/* Form Inputs
	/*--------------------------------------------------*/

	/**
	 * Ouputs the options form on admin
	 *
	 * @param array $instance The widget options
	 */
	function form( $instance ) {

		$defaults = array(
			'title'             => 'Flickr Photos',
			'bluu_flickruser' 	=> '',
			'bluu_feedcount' 	=> 6,
			'bluu_api' 			=> 'c9d2c2fda03a2ff487cb4769dc0781ea'
		);

		$instance = wp_parse_args(
			( array ) $instance, $defaults
		);

		?>

		<p>
			<label for="<?php echo $this->get_field_id( 'title' ); ?>"><?php _e( 'Title:', 'bluu' ) ?></label>
			<input class="widefat" type="text" id="<?php echo $this->get_field_id( 'title' ); ?>" name="<?php echo $this->get_field_name( 'title' ); ?>" value="<?php echo $instance['title']; ?>" />
		</p>

		<p>
			<label for="<?php echo $this->get_field_id( 'bluu_flickruser' ); ?>"><?php _e( 'Flickr ID:', 'bluu' ) ?> <a href="http://idgettr.com/"><?php _e( 'Get your flickr ID', 'bluu' ); ?></a></label>
			<input class="widefat" type="text" id="<?php echo $this->get_field_id( 'bluu_flickruser' ); ?>" name="<?php echo $this->get_field_name( 'bluu_flickruser' ); ?>" value="<?php echo $instance['bluu_flickruser']; ?>" />
		</p>

		<p>
			<label for="<?php echo $this->get_field_id( 'bluu_feedcount' ); ?>"><?php _e( 'Photo Count:', 'bluu' ) ?></label>
			<input class="widefat" type="text" id="<?php echo $this->get_field_id( 'bluu_feedcount' ); ?>" name="<?php echo $this->get_field_name( 'bluu_feedcount' ); ?>" value="<?php echo $instance['bluu_feedcount']; ?>" />
		</p>

		<p>
			<label for="<?php echo $this->get_field_id( 'bluu_api' ); ?>"><?php _e( 'API Key:', 'bluu' ) ?> <a href="http://www.flickr.com/services/apps/create/apply"><?php _e( 'Find your key', 'bluu' ); ?></a></label>
			<input class="widefat" type="text" id="<?php echo $this->get_field_id( 'bluu_api' ); ?>" name="<?php echo $this->get_field_name( 'bluu_api' ); ?>" value="<?php echo $instance['bluu_api']; ?>" />
		</p>

		<?php

	} // end form function


	/*--------------------------------------------------*/
	/* Flush Cache
	/*--------------------------------------------------*/

	/**
	 * Function triggered from action hooks in widget constructor
	 */
	function flush_widget_cache() {
		wp_cache_delete( 'bluu_flickr_photos-widget', 'widget' );
	}


	/*--------------------------------------------------*/
	/* Update Values
	/*--------------------------------------------------*/

	/**
	 * Processing widget options on save
	 *
	 * @param array $new_instance The new options
	 * @param array $old_instance The previous options
	 */
	function update( $new_instance, $old_instance ) {

		$instance = $old_instance;

		$instance['title'] = ( ! empty( $new_instance['title'] ) ) ? strip_tags( $new_instance['title'] ) : '';

		$instance['bluu_flickruser'] 	= $new_instance['bluu_flickruser'];
		$instance['bluu_feedcount'] 	= $new_instance['bluu_feedcount'];
		$instance['bluu_api'] 			= $new_instance['bluu_api'];

		return $instance;

	} // end update function

} // end class


/*--------------------------------------------------*/
/* Register the widget
/*--------------------------------------------------*/

add_action( 'widgets_init', 'register_bluu_flickr_photos_widget' );

function register_bluu_flickr_photos_widget() {
	register_widget( 'Bluu_Flickr_Photos_Widget' );
}